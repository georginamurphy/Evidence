BRAINSTORMING PACKET HANDLING

	What needs to update?
		Players
			Location
			Disconnect / Connect?
		Objects
			Location
			Sprite?
	
	
	Packet headers
		"/c/" - A connection packet, when each user first connects to the server.  Lets server know we need to add this client to the list of connected clients.
		
		"/up/" - An update player packet, transmitted when a user moves their player into a new room (or faces a different way), either via button on GUI or using keyboard.
		         Only the GameWorld, which Server has a copy of, should have references to any player objects.  We need to update the location of the player.  Depending on 
		         which Client we received an update package from, access the GameWold instance and update the appropriate player's location.  GUI's will not have their own 
		         copy of GameWorld, instead, the server will need to send a "/gw/" packet to all clients any time it receives either a "/up/" or /"uo"/ packet.
		         The GUI will simply read the GameWorld byte array into a local temporary variable and call the appropriate render methods for that client.
		
		"/uo/" - An update object packet, transmitted when any user changes the state of an object.  Any change that changes how we need to visually represent
				 the GameWorld to a player should trigger a "/uo/" packet being sent.
		         
		"/gw" - A Packet containing a serialized GameWorld object to be sent from the server to every client when an update to the Server's GameWorld has been made, 
				this makes sure every player is seeing the same copy of GameWorld that is on the server at any given time.
				
	    "/dc/" - A disconnection packet, to be sent from the client to the server when they disconnect.  Allows the Server to remove the the client who sent the "/dc/" 
	    		 packet from it's list of clients.  Will only handle INTENTIONAL disconnections, not scenarios where the program has no chance to send this "/dc/" packet.
	    		 
	    "/ping/" - A ping packet is used to handle UNINTENTIONAL disconnections from the server, these are sent periodically to each client and expects to receive a
	    		 "/ack/" packet back from the client to acknowledge they are still connected and receiving packets from the server.  We know a client has disconnected 
	    		 say when the attempt variable in the ServerClient class reaches a limit, say 5.  If a ServerClient ever hits this limit, remove them from our client list.
	    		 If we receive an "/ack/" packet from a ServerClient, reset the attempt variable to 0. 
	    
	
	